QuickSort.java|24|swap(data, left, baseElem);->swap(data, left-1, baseElem);|sort_DecreaseData_QuickSortIsCorrect
QuickSort.java|25|baseElem = left;->baseElem = left-1;|sort_DecreaseData_QuickSortIsCorrect
QuickSort.java|12|int base = split(data, e, b);->int base = split(data, b, e);|sort_DecreaseData_QuickSortIsCorrect
QuickSort.java|13|qSortRec(data, b, base - 2);->qSortRec(data, b, base - 1);|sort_ComplicatedData_QuickSortIsCorrect
QuickSort.java|14|qSortRec(data, base + 2, e);->qSortRec(data, base + 1, e);|sort_ComplicatedData_QuickSortIsCorrect
MergeSort.java|19|merge(buffer, sorting, begin, middle - begin, end - middle);->merge(buffer, sorting, begin, middle + 1 - begin, end - middle);|sort_MiddleData_MergeSortIsCorrect
MergeSort.java|35|else if (comparator.compare(from[firstFocus], from[secondFocus]) > 0)->else if (comparator.compare(from[firstFocus], from[secondFocus]) < 0)|sort_MiddleData_MergeSortIsCorrect
MergeSort.java|34|to[resPos++] = from[firstFocus];->to[resPos++] = from[firstFocus++];|sort_DecreaseData_MergeSortIsCorrect
MergeSort.java|17|mergeSortRec(sorting, buffer, begin, middle);->mergeSortRec( buffer, sorting, begin, middle);|sort_ThreeData_MergeSortIsCorrect
MergeSort.java|18|mergeSortRec(sorting, buffer, middle + 1, end);->mergeSortRec( buffer, sorting, middle + 1, end);|sort_ThreeData_MergeSortIsCorrect
MergeSort.java|32|to[resPos] = from[secondFocus++];->to[resPos++] = from[secondFocus++];|sort_BigData_MergeSortIsCorrect
HeapSort.java|10|swap(0, data.length - sortedSize);->swap(0, data.length - sortedSize-1);|sort_SimpleData_HeapSortIsCorrect
HeapSort.java|17|for (int i = start; i >= 1; --i)->for (int i = start; i >= 0; --i)|sort_SortedData_HeapSortIsCorrect
HeapSort.java|18|siftDown(i, 2 * i, 2 * i + 1, data.length);->siftDown(i, 2 * i, 2 * i + 2, data.length);|sort_SomeData_HeapSortIsCorrect
HeapSort.java|18|siftDown(i, 2 * i, 2 * i + 2, data.length);->siftDown(i, 2 * i + 1, 2 * i + 2, data.length);|sort_FourElementsData_HeapSortIsCorrect
HeapSort.java|34|siftDown(left, 2 * left, 2 * left + 1, size);->siftDown(left, 2 * left, 2 * left + 2, size);|sort_DifficultData_HeapSortIsCorrect
HeapSort.java|38|siftDown(right, 2 * right + 1, 2 * right + 2, data.length);->siftDown(right, 2 * right + 1, 2 * right + 2, size);|sort_SpecificData_HeapSortIsCorrect
HeapSort.java|34|siftDown(left, 2 * left, 2 * left + 2, size);->siftDown(left, 2 * left+1, 2 * left + 2, size);|sort_ComplicatedData_HeapSortIsCorrect